@model WaslnyLib.Entity.Trip

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .form-group {
        margin-bottom: 15px;
    }

    .btn-primary {
        margin-top: 10px;
    }
</style>
<section class="hero-wrap hero-wrap-2 js-fullheight" style="background-image: url('../../Front/images/bg_3.jpg');" data-stellar-background-ratio="0.5">
    <div class="overlay"></div>
    <div class="container">
        <div class="row no-gutters slider-text js-fullheight align-items-end justify-content-start">
            <div class="col-md-9 ftco-animate pb-5">
                <p class="breadcrumbs"><span class="mr-2"><a href="index.html">Trip<i class="ion-ios-arrow-forward"></i></a></span> <span>Edit <i class="ion-ios-arrow-forward"></i></span></p>
                <h1 class="mb-3 bread">Trip</h1>
            </div>
        </div>
    </div>
</section>


<div class="request-details">
    <div class="container">
        <nav class="pt-4" aria-label="breadcrumb">
            <ol class="breadcrumb breadcrumb-edit">
                <li class="breadcrumb-item"></li>
            </ol>
        </nav>

        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.TripID)

        <div class="form-group">
            <p style="margin-left: 15px;">Booking DateTime</p>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TripBookingDT, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", @type = "datetime-local", @id = "bookingDateTime" })
                @Html.ValidationMessageFor(model => model.TripBookingDT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                <button type="button" class="btn btn-primary" onclick="setCurrentDateTime()">Book Now</button>
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Predicted Travel DateTime</p>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TripPredictedTravelDT, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", @type = "datetime-local", @id = "tripPredictedTravelDT", @onchange = "validatePredictedTravelDateTime()" })
                @Html.ValidationMessageFor(model => model.TripPredictedTravelDT, "", new { @class = "text-danger" })
                <div id="validationMessage" class="text-danger" style="margin-top: 10px;"></div>
            </div>
        </div>
        <div class="form-group">
            <p style="margin-left: 15px;">Real Travel DateTime</p>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TripRealTravelDT, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", @type = "datetime-local", @id = "tripRealTravelDT" })
                @Html.ValidationMessageFor(model => model.TripRealTravelDT, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            <p style="margin-left: 15px;">Arrival DateTime</p>
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.TripArrivalDT, "{0:yyyy-MM-ddTHH:mm}", new { @class = "form-control", @type = "datetime-local", @id = "tripArrivalDT" })
                @Html.ValidationMessageFor(model => model.TripArrivalDT, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Start Kilometer</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TripStartKM, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TripStartKM, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">End Kilometer</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TripEndKM, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TripEndKM, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Passengers</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TripPassengers, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TripPassengers, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <p style="margin-left: 15px;">Trip Status</p>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TripStatus, new List<SelectListItem>
                   {
                       new SelectListItem { Text = "UpComing", Value = "UpComing" },
                       new SelectListItem { Text = "Pending", Value = "Pending" },
                       new SelectListItem { Text = "Completed", Value = "Completed" }
                   }, "Select Trip Status", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TripStatus, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Driver Rating</p>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TripDriverRating, new List<SelectListItem>
                   {
                       new SelectListItem { Text = "1", Value = "1" },
                       new SelectListItem { Text = "2", Value = "2" },
                       new SelectListItem { Text = "3", Value = "3" },
                       new SelectListItem { Text = "4", Value = "4" },
                       new SelectListItem { Text = "5", Value = "5" }
                   }, "Select Driver Rating", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TripDriverRating, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <p style="margin-left: 15px;">Driver Rating</p>
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.TripCarRating, new List<SelectListItem>
                   {
                       new SelectListItem { Text = "1", Value = "1" },
                       new SelectListItem { Text = "2", Value = "2" },
                       new SelectListItem { Text = "3", Value = "3" },
                       new SelectListItem { Text = "4", Value = "4" },
                       new SelectListItem { Text = "5", Value = "5" }
                   }, "Select Car Rating", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.TripCarRating, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Comments</p>
            <div class="col-md-10">
                @Html.EditorFor(model => model.TripComments, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.TripComments, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <p style="margin-left: 15px;">Driver Phone</p>
            <div class="col-md-10">
                @Html.DropDownList("DriverID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.DriverID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Car Plate Number</p>
            <div class="col-md-10">
                @Html.DropDownList("CarID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CarID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Route From</p>
            <div class="col-md-10">
                @Html.DropDownList("RouteID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.RouteID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Customer Phone</p>
            <div class="col-md-10">
                @Html.DropDownList("CustomerID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <p style="margin-left: 15px;">Is Deleted</p>
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.IsDeleted)
                    @Html.ValidationMessageFor(model => model.IsDeleted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
        }

        <div>
            @Html.ActionLink("Back to List", "Index")
        </div>
    </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    function setCurrentDateTime() {
        // Get the current date and time
        const now = new Date();

        // Format the date and time to yyyy-MM-ddTHH:mm
        const formattedDateTime = now.toISOString().slice(0, 16);

        // Set the value of the bookingDateTime input field
        document.getElementById('bookingDateTime').value = formattedDateTime;
    }

    function validatePredictedTravelDateTime() {
        // Get the current date and time
        const now = new Date();

        // Add 1 hour to the current date and time
        const oneHourLater = new Date(now.getTime() + 60 * 60 * 1000);

        // Get the value of the tripPredictedTravelDT input field
        const tripPredictedTravelDT = document.getElementById('tripPredictedTravelDT').value;

        // Convert the input value to a Date object
        const predictedTravelDateTime = new Date(tripPredictedTravelDT);

        // Reference to the validation message element
        const validationMessageElement = document.getElementById('validationMessage');

        // Check if the selected date is less than one hour from now
        if (predictedTravelDateTime < oneHourLater) {
            // Set the validation message text and style
            validationMessageElement.innerText = "Predicted Travel DateTime must be at least 1 hour from now.";
            validationMessageElement.style.color = "red";

            // Optionally, you can clear the input or set it to a valid value
            document.getElementById('tripPredictedTravelDT').value = "";
        } else {
            // Clear the validation message if the date is valid
            validationMessageElement.innerText = "";
        }
    }
</script>